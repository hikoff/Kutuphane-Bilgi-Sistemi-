<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAB3GAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAAAlw
        SFlzAAALEwAACxMBAJqcGAAAGClJREFUeJztnX+UXVV1x99MfkCbzLv3vsm8c99k8s55k2koA2oxKIqC
        P5bFH4AgBaWRJPx0FazLtkr9o8tVoEIjBYoiIFSxpSiuFAREpC3LqhRr+bUAJZBYws9qDSGRCCFByLR7
        3/dIJ8lkkplzzt3n3vf9rHWWJGbevO++5+yz9z3n7FOpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFByl1JxELTggVq2jYmU+Ead6RZyar9J/3xQp
        fWekzCr68+P0543cotS8SH/+X27Zf3f+nv8N/1v+Gf5Z+vNXss/iz6TP5t/Bv0taLwBdydDQ0G9V0+GD
        I9U8LUr1pTRA/y1W+tnXBnN+Ta+j//0efwf+Lvyd+LtJ2weAUjEwoFOaeY/mWZhm5rtosG/Nf7DvtVN4
        JYs0lL6K/ryMoggjbT8AioXW+0b11ns6Yfd98oPauq3NHAI5MdYmbV4AgiPSOqbZ8mTKxb9DM+jmAAat
        l8baKGW4laODJBmOpO0OgBgDA6Nz40bzozQgvh12WO+pkWbSfktS10vwUhF0Ddmb+nZ4v0F8EAbSyBFs
        4jQhajQXSz8fAJzDb8ejhvkYDfr7pQdb8E2Z+8hWZ+B9ASg8c9ORAcp7P0O5/c/FB1bRWra0qVf09y8Y
        lH6OAEwJ6sCaOvCXafBvER9IBW9kw5eoXZEMLlwg/VwBmJQ5arjeWa/HwHfdlH6Z3xMgIgDBUR0aqlHu
        egkGvv/GEQHZ+qKo2UyknzsAM9sv9yS24nZ541WUuvkkPwPpTgC6kGrDHNE5YCM/GLq4Ran+Ke+clO4P
        oEvgPD9S+lrpjo+2c9MredVFun+AEhOlrRMo3F8v39nRJmx8zJlSMnpUPdJ9BZSI2tDQfBr4/yzewffQ
        siWz1DzM++2pXUbtU3HaOilJ9fuqaetN9G80vzzj1mg0fvs1ffzfr/09n+Djf8s/wz/Ln9H5rFuzzy7A
        i076jrdjtQA4gTr+cTSzPCfdqSec7bLDQ/o8ikyO7xtsLaKvOyMHk8zoGzT7cTREv/uv+Dt0ConI22QH
        ++j1UUMfm4M9QBnJDutk1XAC6MztAf8cDbbreZtsLW2OVsIKc3v5jEO2IpLqbwZ1zkHpq3DYCEyJWqr3
        pzDyUenOm73hphm+VtdvqeQzu7tiRlLXb+1ECA+L21GZVRy1SBsFFIAobf4BDbxfC85Yq2ngnNuZ5UtB
        Fh2QIyNtawSd6SakBGAyZnQKaY4JzFAvZUuLjdZh0kbwTA/pPZy0/qPQy8QxikguqBQrmgK+4Xy/U6km
        54Gvn6Tf+2fduK01W3HgFQalnxKIBm7BewGQMW9es5H7OX2l702UPrGCbazE4llcFUjiGXDBVWn1QJBE
        DR+Y6wzEnVy1jpLWHSg9cd18kGbnB3OLBCgCK9O7FjAF+pQ5JK/1a8p3H+H9BJWwlu5Cpaez43J1Tk55
        A298khYNciTmF1Fch85/59rIFYEqo6OzpTUXj8WzOictvW+9pr7wQqSa75ZWDHKAt7hmZ8r9dqptXMWm
        b3CwX1pv0ZnbWDSvc9GI19UZLlnOJzyl9QKPZPvbPZfg5nA/aTTfJq21bPASqfe0gPoGnEBJoQf8Dr8z
        P1+Lpc+rjIzsI621tPCtSak5n23tMxLogv0Y3QW/8PO8u++JpDH8dmmd3UJVtd5MTuC/vDmBVG/Ci8GS
        wEt9nt/2X9Pfv1+ftM5uo1YbqXotzKLMBiwRFhze5MNrvX46iN4a1VunS2vsduLsFmJvqd0T2CxUULjI
        BYWJd3sJEZV+msNQaY2gTTSoD6Ln8rinSOA+bBsuHjN87e2nwf9DLO+FR+cWpru8PPNU30y/oldaI9hL
        aOb/vJ+QUK/ke/6k9YHdMDKyT5Sar/tx/OZz0vLAXsDn+WMPm0Y6HQBbecOnp3Os27UTGIvr5hhpcWAS
        2rXqnG/xHeMju9LawNQgh32264mAl5K5WpS0NjAB2Zl+92W8tiWp/iNpbWB6UCRwFj9Dt07APDy+ojII
        hNh9Ac9tkdInS+sCdtAzPMW5E1DmSmldYBxRQ3/IddhPM/+Z0rqAG8gJnOo6HeDaBdK6AMEXQLiu208e
        /s+ldQG30CTxJ04dgNLreaOZtK6ux/WNPVjuKS+uVweor9wmramroYew3G3or79ZwVJfmemhQXudyz7D
        9QylRXUlnUIRz7rz5vpOHOXtAvhIscsdg5QK4FZiAfiaLIee/Als7+0e2tuG3RWD5VOJ0pq6Cq7a4u7h
        mS1Ro/lGaU0gX7Lbkh1Wh0JNwfyYyXfmOfTep0oLAjLQ81/qcCJZVcE9D/6JlfmEw9D/Gmk9QBaXRUWw
        a9QzfJ2UwzX/tVxVRloTkKV9Dbz+mZM+xXcMDA3VpDWVFjLwJW4Gv36lc+U2AJVkoHmou0Kj+kJpPaWk
        NjQ039WNsln1XgDG0a427KJvmc0oI+YBMuzlbsI0vZrXgqX1gMDgYiLKPOLECaT6Umk5pSJpDDcdLdls
        Q/lusDuofxweuzg0RH01GVy4QFpPaSCDftlReHaFtBYQNtTXrnYTBZgvSWspBXPUcN1J2WdlNvL2YWk9
        IGz4LT6/zXcw2WxGf3NApPS5Ljwy7x+Q1gKKAZeAc9LnUvNZaS2Fhivwujjwwy93+LppaT2gIIyOzqZ+
        t8beAehf4oWzBdn98E7yMX2ctBZQLKrKfNhJ38PtUdOHwvb7HYT+91dwxh9MnR6aOB6073/6XmkhhaSa
        Dh/swgMnqnmktBZQTKKGPtZJFDCoD5LWUjicLP3B+wI7eiiCfMDaAShzubSQQsGXMbq44IPyuI9IawHF
        Jk5bJ1k7gFQ/j7sEpoAToyv9ZAXns4E1i2e5qB6EyWgKkMf8tgOvi+u8Ktn2Vis7Sn//EIhS82n7dNR8
        S1pHIYi0jm33/fPOQa4dIK0lBOAA7OE+absblU+yJslwJK0leDpXOdmG//8grSMU4ADc4Oba8dZJ0jqC
        hwz9HWtDN1qHSesIBTgAN9Ck8k7riSnVN0vrCJt2zfbNVobm8/5gO3AAzughezxm6QBe4G3G0kKCpdow
        77X2skqfI60jJOAA3MHXxtn3T5QP3y1cScXWwLW0OSqtIyTgANwR11uvt7UnagZOAofvliHWT6Q1hAYc
        gFtsy4bxnRbSGoIku+bbOrzS50rrCA04ALc4KB46xkVupHUEh4vjlyj1vStwAG7hFSbriaqhPyStIzis
        839lNtDHzJDWERpwAM6ZYV0yTJmLpEUEB5/cs/KqqfmGtIYQgQNwD/XVf7Lsqz+W1hAUWemvVP/GLqwy
        Z0jrCBE4APckqT7TLgLQL6NU2DiqqvVm245aS/X+0jpCBA7APUl9+HW2do0azcXSOoKB66bZeVSzkT6m
        V1pHiMABeKGX+5yVA1D6ZGkRwWD7ApDPD0hrCBU4AD9EynzXctK6RFpDMJBBvm/pTc+R1hAqcAB+sN8W
        rO+Q1hAMZIx1dhFA63hpDaECB+AHrvBjGbX+QlpDEHD9P9tO2jfYWiStI1TgAPzAL50tbTuGOoFEooYP
        tPKkyrxUwQag3QIH4I2ZXOXHxrZYuarwporW0XahFA5XTAYcgD/IATxqY9sk1e+X1iAOX9pp6QBuldYQ
        MnAA/iAHcLudffVZ0hrEISOssHQAl0lrCBk4AH/whR92fddcIK1BHDLEVywdwKekNYQMHIA/yAGcbWVf
        pa+W1iAOF0q0MWJS10ukNdhgO0CL3qTtbwN9/6V2DsDcKK1BnEjpf7cxItcRlNZgg/QAlG7S9rchSfUH
        bLRT3/+BtAZxbN+kFv1QhfQAlG7S9rfB9hBblJqHpTWIQ17wGUsvaqQ12CA9AKWbtP1tiOrNYcu++5S0
        BnFipZ+1MeLcdGRAWoMN0gNQuknb34Y59ZaycgCp+R9pDeLw1ck2Riz6fWvSA1C6SdvfBr5/0kp/+xh7
        d2N76SJXE5LWYIP0AJRu0va3gffy22jnW7CkNYhDhnjVsgMV+hyA9ACUbtL2t2SGpf5XpQWIAwcgPwjh
        AKYNHIAtSAHkByEcwPRACuAAvASUH4RwANMDLwEdgGVA+UEIBzA9sAzoAPuNQM2WtAYbpAegdJO2vw3V
        gQUL7fouNgJZ37ZaTYcPltZgg/QAlG7S9rehT5lDrBwAitlkEcCdNkZMUv0+aQ02SA9A6SZtfxsS1TzS
        Uv/3pTWIEytzk50RWydJa7BBegBKN2n720Dff7mVfmVukNYgToyCIF7p5gHqGxQEcQBKgvkFDsAf5ACu
        sOu7KAmGoqCegQPwB4qCOiBWraMsvSiKKkwCHIA/KIRfbWNblAWv4GIQ38ABeGMmOYCtNrbFxSAVV1eD
        mf2kdYQKHIAfErXgAEvb4mqw13BwOegJ0hpCBQ7AD7gc1CFkkO9ZGVPp86Q1hAocgB9oAJ9vZ1v9r9Ia
        giFK9aV2DsDcJq0hVOAA/GC9AqDMxdIagiFSzdMsjfkr+pheaR0hAgfghV7bY+zUlkuLCIZq2nqTbUfl
        lzLSOkIEDsA98YB5g61do0F9kLSOYOCqPpQT/cbKoA3zMWkdIQIH4B7ewGMXseqXK1rvK60jKMiod1s5
        gNRcL60hROAA3MOHeCz76o+kNQQHGfVv7bxqVl4JG4J2Ag7AOTP5nZOdXfWF0iKCI0pbx9t21qSu3yqt
        IzTgANxCNjnc1qZx3RwjrSM4+vsXDNoaFvsBdgUOwC18gs/SpmNz1HBdWkeQWN8UTD8vrSE04ADcYt1H
        U/2QtIZgsX4PkGI5cGfgANwRDerfs7Un5f+fl9YRLNWGOcLWwEgDdgQOwB0U/v+1g/75Lmkd4aL1vnxb
        ipWRlV5Dn9QjLSUU4ACc0UP2WGs1+FP968ro6GxpIUHDFX7swyxzuLSOUIADcAPP3Nb9UpmbpHUEDxlq
        mYMw61ppHaEAB+AGCv+/YWvLpK7/UFpH8NRqI1VKA7bYOQDzUnVoqCatJQTgAOzpGxzsd9Ant3DfltZS
        CCgNuNk6CkC58Aw4AHusy39zwx0Aew+FSkusHYDSz1Qqi2dJawFFZ/Es6ktP209IqFq112SnA633W2c5
        1xJpLaDYxC7eSaX6edT/myIUdl3pIOy6v4IlQTB9enjnngMHgMtrpoqLogttJ9A6WloLKCY0cI9z0Qd5
        B6G0lkLCM7gD7/uTCsqFganDZb8etJ+A9D3SQgpL1DBnOPHAeAEDpkii9IlO+p5qniatpbB0SoVZ3RnQ
        8cKrsSIA9prR0dnU735m7wD0L1H6yxIy5F+6iQL0n0prAcXAybp/2wH8hbSWwsM7+qLUvGgfBZhfzU1H
        BqT1gLDhYh0OSn7zzr/NvINQWk8psL2HfVwqcJW0FhA21E++6iji/KK0ltKQNIabtjexdtq2uNE6TFoP
        CBPqH++gNuZg9t9Smz8yJK2nVPBmCkdRwBq8mAG7MDKyj225r3Hp5iXSckrHvHnNBp/ycxOemfOl9YCw
        cFHtp9O3XpxTbylpPaWEPOtFTjx0ql9JBpqHSusBYUAp5tupX7zqqG+tkNZTWqJmM6EQfr2bB2Uex/ls
        kCTDEfWFJxwN/nX8edKaSo31vWzjwzVUDup6XFT62d6fcD9lLszg/f3OHlq9dbq0ICBDkuozXfUjSk8f
        qOBqunygQfsedw9Ob+XryaU1gXzpU+YQR0vL3MYomnyntKauIlLmOoepwFPYJdg9ZLv9lH7GYf/5e2lN
        XQdvs3RyUGh703ejaksXwHdPpOZHDiPI9Zg8hKAHsNSdA8icwMoKageUmR4a/F932Wdo9v8BJg5BKBW4
        3bETwDpuSXG3j2RnJ2AeTerDr5PW15Xwris+d+34gX5GWhdwCx8H9zH4t/eZ9onV5dI6u5K4bo5x/EDH
        eL+BtC7ghlg1P+5z8O/UvoaUQAA+6uv4QW6j/O4UaV3ADnqGp8YOTvhNMYJESpA3Sqk5ZPhVrp0AIoHi
        EqvWH+c9+Lc7AaQE+dM3b/h3XFRzmaB9VlobmBr8Hkdi4E/QkBLkSdTQx/rx+tnqAC4ZCZ9eX2/7px0N
        ICXIFwq/LvDyMJW5gSsVS+sDu4GLeqTmeukBvxsn8BIOC+UHHxi6xdODvAs7v8KjXczT/Me0nmm+zgAp
        QR7wTE0P9sd+nIB+plbXb5HWCNpEjeZieiZPSs/yU5hEVtXS5qi03UoPz9Rk8Me8PEg+SVY3n5TW2O1w
        WE3P4mXpQT0NJ4CUIA/Y01LuvsHfg9TXorJQ/nDlHZfFPHZt+pV8HIG+lpewpe1Zavh2Vr4YxONDfBLl
        xvOD06/YV2SXZjX9N/UNLjyU/vcL+TgBrBJ4hwco39bic8bIqg2j5Lg/2kd5uXqvowKeEw1+82LSaL7t
        tV9Jf7fMyc1Ue3YCSAl8U22YIxxWgZm4Kb0a0YB7uOKOmws7Jx2EW7ja1M6/u7+hf9dlGbrJvwNSAq+w
        E/AbCWRtjBzB1VgutIeX9+L2dV1et/TyLF+tt35/t18kiz6QEpQCrgPPeZ73B5nqF8ijn8MbVKQ1F4/F
        s3iVxdPW7p2f0/Pjw/7JiJESlAMuBOpzdWCHpvSaqjIfrqDa0N7Qmyh9ou9wf9yzWc/7CKbyBZESlIRs
        idDZpRB7NdM8xLULKjhTMBE9ZJ/j8hpYnbaWB/O0vi1SgnIwMKBTmgXuybHTZTXk40bzoxzmSuuXh0L9
        1CzNnGOezyDV/8nvF2y/fYyUoPjw3mzqgDfn2wGz8O5p6jyfrg4N1aRtkDesmTr12S7Lc0/BAd/o8lAX
        UoJy0Esd8nOxQAGJbPlJmes6l0uUOT3oIY3v4h18rDn3gd++wOO8io93MUgJygHn6Hm8eZ6kPZY5onrr
        9dK2cEU8YN7QOaK9VsyuvBNUtY7yrhUpQfHpG2wtoof4sKAT2O7peXchL1vS15opbZcpMJO+/+HZoOeN
        UdJ2TPVD1YGFI3mJR0pQArL3AspcKd15t7fsLINeyRdadsK/kJYUezliyW5uVuYG4QhqfBsjJ/QlkSIu
        SAnKAaUEH6RZ7NkAOvOOD50GGT3473K6wHsMaqnev5JPlDCTl0/pd36Eo5PsO4Qz4Mc1vS5RzSNzsMek
        xEgJig8vFZKBb5Pv1HtoSm+l7/lIxzFczm/Z6e+XUtTwAb4NtzqwYCHfqRg1m8nAwOjc/9c3Opf/jv8/
        DpX53/LP8M+239SbKzqf+aj3sxQuBkOqb+ULYyT7zHiQEpSEKG2d4PZCUjS3LXs2y6T7yYQgJSgHPFN2
        LiERqTePttvBv3JuY9E86f6xJ2KkBOUgUs135797DW2XpswDnf0ThQEpQXnoJSMvQ1ogMvCf69RknCHd
        CaYFUoLyEGkdkxO4MIc6A13f2uGzXsE1AaWfuwtipATloV2FWK9gY0sPlNI1rvyr9FXz5jUb0s/ZNUgJ
        SkZt/sgQb0BBROCgw9LsSIPji7WhofnSz9UrSAnKB4epWVUbZf5beiAVr+l1XE2J9yZIP8c8iZESlBD2
        7vXW6RTC3is/sAJvSt8TqeZp3VxGDSlBiWlXIdIrsrfY0oMtkJZtJab8PhrUB0k/n2BASlBu+LBRVvtO
        mW8JnY2XHfT8olSZG/kcA25c3j0xUoLyw1eLxWnrJBoQN3ElYenB6a2TsTZyeEldL+nv369P2u5FASlB
        dzGTz/930oT74uJvOV7LoWx24UYX5/XWICXoTrKLMVTraH4jTk7hjrDTBf0KO61swKetE1wU3QQ7EiMl
        6HJ4Jmg0F5NDOIUG28WZU0jNL/Ie7PQ7f86/m78DfZeT6Tu9Efci5gNSArAL/CKNVxiyc/yq+XEu1kED
        9O/aLxn1DzslztbyRRj0dxvHv2vo5OYbs/+vHbL/lH+Gf5avOOt81ln82VnhEQx0eZASAACQEgDQ5XDk
        RwN0VU7p3zWV0dHZ0poBAOPgfSU0OL+WjxPQdyANBCBAcksJUv0Faa0AgAnIaZVgjFMPaa0AgAnIIyXg
        Y9rSOgEAk0ADdbmvlICXi6X1AQD2gK+UgD5zk7Q2AMBe4CMl4A1k0roAAFPAZUrAUYW0HgDAFHGWEihz
        sbQWAMA0cJASvJqoBQdI6wAAWDDdlAAbgQAoCVNOCZT+FxR3AaBEcErAV8rTAN82WdhPg/9vcA4AgJKS
        qOEDKRq4jJzBI3yxDVdszi7BpYGPrb8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAQFj8H7/LVHRwbbpTAAAAAElFTkSuQmCC
</value>
  </data>
</root>